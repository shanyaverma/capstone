import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
from scipy.misc import imread
from os import listdir
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
import numpy as np


##########################load############################
import scipy
import os
X=[]                           
Y=[]
for j in listdir(os.getcwd()+"/synthetic_data/"):
    for i in listdir(os.getcwd()+"/synthetic_data/"+j):
        try:
            a=scipy.misc.imread(os.getcwd()+"/synthetic_data/"+j+"/"+i)

        except:
            continue
        else:
            #=a.reshape(a.shape[0]*a.shape[1])
            X.append(a)
            Y.append(j)
    print j
X=np.array(X)
Y=np.array(Y)
##############################Y one hot####################
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)

#########################vars#############################
img_rows, img_cols = 200, 200
nb_filters = 32
pool_size = (2, 2)
kernel_size = (3, 3)
########################## setup input########################
X_train=X
Y_train=dummy_y
X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 3)
input_shape = (img_rows, img_cols, 3)

model = Sequential()

model.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1],
                        border_mode='valid',
                        input_shape=input_shape))
model.add(Activation('relu'))
model.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=pool_size))
model.add(Dropout(0.2))

model.add(Flatten())
model.add(Dense(64))

model.add(Activation('relu'))
model.add(Dense(Y_train.shape[1]))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adadelta',
              metrics=['accuracy'])

model.fit(X_train, Y_train, batch_size=612, nb_epoch=12)
